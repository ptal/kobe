type time_unit = [
    NSec
  | MSec
  | Sec
]

type memory_unit = [
    Bytes
  | KB
  | MB
  | GB
]

type csv_field = [
    ProblemPath
  | ProblemName
  | Time of time_unit
  | Memory of memory_unit
  | Solutions
  | NodesBeforeLastSol
  | Fails
  | Nodes
  | Optimum
  | Satisfiability
  | Restarts
  | DepthMax
]

type csv_desc = {
  fields: csv_field list
}

type problem_set = {
  path: string;
  timeout: int;
}

type solver_config = {
  name: string;
  version: string;
  exec: string;
  globals: string;
}

type solvers_config = solver_config list

type decomposition = {
  name: string;
  description: string;
}

type make_model = {
  decompositions: decomposition list;
}

type search_strategy = {
  plain: string;
  short: string;
}

type model_to_fzn = {
  strategies: search_strategy list;
}

type domain = {
  name: string;
  strategies: string list;
}

type model_to_absolute = {
  domains: domain list;
}

type mzn_to_fzn = {
  models: string list;
  strategies: search_strategy list;
}

type solver_option = {
  name: string;
  option: string;
}

type solver = {
  name: string;
  options: solver_option list;
}

type pipeline = [
  | MakeModel of make_model
  | ModelToFzn of model_to_fzn
  | ModelToAbsolute of model_to_absolute
  | ModelToXCSP3
  | MznToFzn of mzn_to_fzn
  | Solve of (solver list)
]

type benchmark = {
  bench_exec: string;
  input_dir: string;
  output_dir: string;
  problem_sets: problem_set list;
  pipelines: pipeline list;
  csv: csv_desc;
  solvers_config: solvers_config;
}
